{"version":3,"sources":["Config.js","Cells.js","App.js","index.js"],"names":["rows","cols","cell","body","food","start","keys","left","up","right","down","Cells","board","handleKey","cells","row","col","value","className","push","key","onKeyDown","tabIndex","style","width","height","App","props","snake","setState","direction","frame","state","head","getNextIndex","foodCell","length","indexOf","i","maxCells","Math","floor","random","pop","unshift","setTimeout","gameOver","e","nativeEvent","keyCode","abs","x","y","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kMAAaA,EAAO,GAClBC,EAAO,GACPC,EAAO,GACIC,EAAO,EAClBC,EAAO,EACIC,EAAQ,GACRC,EAAO,CAAEC,KAAM,GAAIC,GAAI,GAAIC,MAAO,GAAIC,KAAM,ICmB1CC,MAtBf,YAEE,IAFoC,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAChBC,EAAQ,GACLC,EAAM,EAAGA,EAAMf,EAAMe,IAC5B,IAAK,IAAIC,EAAM,EAAGA,EAAMf,EAAMe,IAAO,CACnC,IAAMC,EAAQL,EAAMX,EAAOc,EAAMC,GAC3BE,EACJD,IAAUd,EAAV,YAA+Bc,IAAUb,EAAV,mBACjCU,EAAMK,KAAK,yBAAKC,IAAKnB,EAAOc,EAAMC,EAAKE,UAAWA,KAGtD,OACE,yBACEG,UAAWR,EACXS,SAAU,EACVC,MAAO,CAAEC,MAAOvB,EAAOC,EAAMuB,OAAQzB,EAAOE,GAC5CgB,UAAU,SAETJ,ICmFQY,G,kBAjGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRtB,MAAQ,WACN,IAAMO,EAAQ,GACRgB,EAAQ,CAACvB,GACfO,EAAMP,GAASF,EACf,EAAK0B,SACH,CACEjB,QACAgB,QACAE,UAAWxB,EAAKG,QAElB,kBAAM,EAAKsB,YApBI,EAwBnBA,MAAQ,WAAO,IAAD,EACwB,EAAKC,MAAjCJ,EADI,EACJA,MAAOhB,EADH,EACGA,MAAOkB,EADV,EACUA,UAChBG,EAAO,EAAKC,aAAaN,EAAM,GAAIE,GACnCK,EAAWvB,EAAMqB,KAAU7B,GAAyB,IAAjBwB,EAAMQ,OAC/C,IAA6B,IAAzBR,EAAMS,QAAQJ,GAAlB,CAIA,GAAIE,EAAU,CACZ,IACIG,EADEC,EAAWvC,EAAOC,EAExB,GACEqC,EAAIE,KAAKC,MAAMD,KAAKE,SAAWH,SACxB3B,EAAM0B,IACf1B,EAAM0B,GAAKlC,OAEXQ,EAAMgB,EAAMe,OAAS,KAEvB/B,EAAMqB,GAAQ9B,EACdyB,EAAMgB,QAAQX,GACd,EAAKJ,SACH,CACEjB,QACAgB,UAEF,WACEiB,WAAW,EAAKd,MAAO,aArBzB,EAAKF,SAAS,CAAEiB,UAAU,KA7BX,EAuDnBjC,UAAY,SAAAkC,GACV,IAAMjB,EAAYiB,EAAEC,YAAYC,QAEnB,IADAT,KAAKU,IAAI,EAAKlB,MAAMF,UAAYA,IAE3C,EAAKD,SAAS,CACZC,eA5Da,EAiEnBI,aAAe,SAACD,EAAMH,GACpB,IAAIqB,EAAIlB,EAAOhC,EACXmD,EAAIZ,KAAKC,MAAMR,EAAOhC,GAC1B,OAAQ6B,GACN,KAAKxB,EAAKE,GACR4C,EAAIA,GAAK,EAAIpD,EAAO,EAAIoD,EAAI,EAC5B,MACF,KAAK9C,EAAKI,KACR0C,EAAIA,GAAKpD,EAAO,EAAI,EAAIoD,EAAI,EAC5B,MACF,KAAK9C,EAAKC,KACR4C,EAAIA,GAAK,EAAIlD,EAAO,EAAIkD,EAAI,EAC5B,MACF,KAAK7C,EAAKG,MACR0C,EAAIA,GAAKlD,EAAO,EAAI,EAAIkD,EAAI,EAC5B,MACF,QACE,OAEJ,OAAOlD,EAAOmD,EAAID,GAlFlB,EAAKnB,MAAQ,CACXpB,MAAO,GACPgB,MAAO,GACPE,UAAW,KACXgB,UAAU,GANK,E,iFAwFjBO,KAAKhD,U,+BAGG,IACAO,EAAUyC,KAAKrB,MAAfpB,MACR,OAAO,kBAAC,EAAD,CAAOA,MAAOA,EAAOC,UAAWwC,KAAKxC,gB,GA9F9ByC,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.39b1bdfa.chunk.js","sourcesContent":["export const rows = 20,\r\n  cols = 20,\r\n  cell = 30;\r\nexport const body = 1,\r\n  food = 2;\r\nexport const start = 44;\r\nexport const keys = { left: 37, up: 38, right: 39, down: 40 };\r\nexport const dirs = { 37: true, 38: true, 39: true, 40: true };\r\n","import React from \"react\";\r\nimport { rows, cols, cell, body, food } from \"./Config\";\r\n\r\nfunction Cells({ board, handleKey }) {\r\n  const cells = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let col = 0; col < cols; col++) {\r\n      const value = board[cols * row + col];\r\n      const className =\r\n        value === body ? `cell-body` : value === food ? `cell-food` : `cell`;\r\n      cells.push(<div key={cols * row + col} className={className} />);\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      onKeyDown={handleKey}\r\n      tabIndex={0}\r\n      style={{ width: cols * cell, height: rows * cell }}\r\n      className=\"board\"\r\n    >\r\n      {cells}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cells;\r\n","import React from \"react\";\nimport Cells from \"./Cells\";\nimport { start, body, food, keys, cols, rows } from \"./Config\";\nimport \"./sass/main.scss\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      snake: [],\n      direction: null,\n      gameOver: false\n    };\n  }\n\n  start = () => {\n    const board = [];\n    const snake = [start];\n    board[start] = body;\n    this.setState(\n      {\n        board,\n        snake,\n        direction: keys.right\n      },\n      () => this.frame()\n    );\n  };\n\n  frame = () => {\n    const { snake, board, direction } = this.state;\n    const head = this.getNextIndex(snake[0], direction);\n    const foodCell = board[head] === food || snake.length === 1;\n    if (snake.indexOf(head) !== -1) {\n      this.setState({ gameOver: true });\n      return;\n    }\n    if (foodCell) {\n      const maxCells = rows * cols;\n      let i;\n      do {\n        i = Math.floor(Math.random() * maxCells);\n      } while (board[i]);\n      board[i] = food;\n    } else {\n      board[snake.pop()] = null;\n    }\n    board[head] = body;\n    snake.unshift(head);\n    this.setState(\n      {\n        board,\n        snake\n      },\n      () => {\n        setTimeout(this.frame, 200);\n      }\n    );\n  };\n\n  handleKey = e => {\n    const direction = e.nativeEvent.keyCode;\n    const diff = Math.abs(this.state.direction - direction);\n    if (diff !== 2) {\n      this.setState({\n        direction\n      });\n    }\n  };\n\n  getNextIndex = (head, direction) => {\n    let x = head % cols;\n    let y = Math.floor(head / cols);\n    switch (direction) {\n      case keys.up:\n        y = y <= 0 ? rows - 1 : y - 1;\n        break;\n      case keys.down:\n        y = y >= rows - 1 ? 0 : y + 1;\n        break;\n      case keys.left:\n        x = x <= 0 ? cols - 1 : x - 1;\n        break;\n      case keys.right:\n        x = x >= cols - 1 ? 0 : x + 1;\n        break;\n      default:\n        return;\n    }\n    return cols * y + x;\n  };\n\n  componentDidMount() {\n    this.start();\n  }\n\n  render() {\n    const { board } = this.state;\n    return <Cells board={board} handleKey={this.handleKey} />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}